akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
akka.persistence.journal.leveldb.dir = "target/rtjvm/journal"  // Hay que crear la carpeta rtjvm debajo de target

akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
akka.persistence.snapshot-store.local.dir = "target/rtjvm/snapshots"

localStores {
  akka.persistence.journal.plugin = "akka.persistence.journal.leveldb"
  akka.persistence.journal.leveldb.dir = "target/localStores/journal"  // Hay que crear la carpeta rtjvm debajo de target

  akka.persistence.journal.leveldb.compaction-intervals { // Dificil de comprobar
    simple-persistent-actor = 1000  //persistenceId a partir del 1001 empezará a compactar el espacio de memoria
    "*" = 5000  // El resto de persistenceId
  }

  akka.persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"
  akka.persistence.snapshot-store.local.dir = "target/localStores/snapshots"

}

postgresDemo {
  akka.persistence.journal.plugin = "jdbc-journal"
  akka.persistence.snapshot-store.plugin = "jdbc-snapshot-store"

  akka-persistence-jdbc {
    shared-databases {
      slick {
        profile = "slick.jdbc.PostgresProfile$"
        db {
          numThreads = 10
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/rtjvm"
          user = "docker"
          password = "docker"
        }
      }
    }
  }
  jdbc-journal {
    use-shared-db = "slick"
  }

  jdbc-snapshot-store {
    use-shared-db = "slick"
  }
}

cassandraDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  //default values
  // Si queremos configuración de producción ir al github akka/akka-persistence-cassandra
  // Que está actualizado por la gente de akka
}

customSerializerDemo {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  akka.actor {
    serializers {
      java = "akka.serialization.JavaSerializer"
      rtjvm = "part3_stores_and_serialization.UserRegistrationSerializer"
    }
    serialization-bindings {
      "part3_stores_and_serialization.UserRegistered" = rtjvm
      // "*" = java  // java serializer is used by default
    }
  }
}

eventAdapters {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    // Declaration
    event-adapters {
      guitar-inventory-enhancer = "part4_practices.EventAdapters$GuitarReadEventAdapter" // Cuando está dentro de un object -> $
    }
    event-adapter-bindings {
      "part4_practices.EventAdapters$GuitarAdded" = guitar-inventory-enhancer
    }
  }
}

detachingModels {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"
  cassandra-journal {
    // Declaration
    event-adapters {
      detach-adapter = "part4_practices.ModelAdapter"
    }
    event-adapter-bindings {
      "part4_practices.DomainModel$CouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponApplied" = detach-adapter
      "part4_practices.DataModel$WrittenCouponAppliedV2" = detach-adapter
    }
  }
}

persistenceQuery {
  akka.persistence.journal.plugin = "cassandra-journal"
  akka.persistence.snapshot-store.plugin = "cassandra-snapshot-store"

  cassandra-journal {
    // Declaration
    event-adapters {
      tagging = "part4_practices.PersistenceQueryDemo$MusicStoreEventAdapter"
    }
    event-adapter-bindings {
      "part4_practices.PersistenceQueryDemo$PlaylistPurchased" = tagging
    }
  }

}
